{"version":3,"sources":["api.js","advanced/Advanced.store.js","advanced/Advanced.js","complex/Collection/Collection.module.js","complex/Collection/Collection.js","complex/Complex.store.js","complex/Complex.js","simple/Simple.store.js","App.js","simple/Simple.js","reportWebVitals.js","index.js"],"names":["products","id","title","category","condition","categories","matches","query","source","lowerCase","includes","sleep","ms","Promise","resolve","setTimeout","makeFakeFetch","data","a","results","filter","item","total","length","fakeFetchProducts","fakeFetchCategories","store","sortAsc","fetched","fetching","onFetch","res","onFetchSuccess","console","log","replace","onChangeCategory","onChangeQuery","onChangeSort","onClearFilters","makeAutoObservable","this","when","slice","product","sort","b","localeCompare","CATEGORIES","Filters","observer","canClearFilters","value","onChange","e","target","map","type","checked","onClick","Advanced","CollectionModule","props","filtersState","filtersDefinition","fetch","_onFetchSuccess","_onFetchFailure","error","onSetFilterState","key","onSetFilterDefinition","options","filters","Object","entries","forEach","every","prop","keys","values","state","Boolean","hasFilters","t","shape","arrayOf","object","isRequired","string","bool","func","objectOf","array","collection","option","Collection","autorun","StoreContext","createContext","Complex","useContext","style","display","marginRight","count","onAdd","onSubtract","pages","isNegative","App","useState","page","setPage","PageComponent","marginBottom","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.081ea609.chunk.js","sourcesContent":["import lowerCase from \"lodash.lowercase\";\n\nconst products = [\n  { id: 1, title: \"iPhone 8\", category: \"Phone\", condition: \"new\" },\n  { id: 2, title: \"Samsung Galaxy\", category: \"Phone\", condition: \"new\" },\n  { id: 3, title: \"OnePlus 8\", category: \"Phone\", condition: \"used\" },\n\n  { id: 4, title: \"Dell XPS\", category: \"Laptop\", condition: \"new\" },\n  { id: 5, title: \"Macbook Pro\", category: \"Laptop\", condition: \"new\" },\n  { id: 6, title: \"Asus Zenbook\", category: \"Laptop\", condition: \"used\" },\n\n  { id: 7, title: \"Nikon D750\", category: \"Camera\", condition: \"new\" },\n  { id: 8, title: \"Canon M50\", category: \"Camera\", condition: \"new\" },\n  { id: 9, title: \"Leica M6\", category: \"Camera\", condition: \"used\" },\n];\n\nconst categories = [\n  { id: 1, title: \"Phone\" },\n  { id: 2, title: \"Laptop\" },\n  { id: 3, title: \"Camera\" },\n];\n\nconst matches = (query, source) => lowerCase(source).includes(lowerCase(query));\n\nconst sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\n\nconst makeFakeFetch = async (query, data) => {\n  const results = query ? data.filter((item) => lowerCase(item.title).includes(lowerCase(query))) : data;\n\n  await sleep(500);\n\n  return Promise.resolve({\n    data: results,\n    total: results.length,\n  });\n};\n\nconst fakeFetchProducts = (query) => makeFakeFetch(query, products);\n\nconst fakeFetchCategories = (query) => makeFakeFetch(query, categories);\n\nexport { fakeFetchProducts, fakeFetchCategories, matches };\n","/**\n * Advanced example demonstrating all core MobX constructs.\n */\n\nimport { makeAutoObservable, when } from \"mobx\";\n\nimport { fakeFetchProducts, matches } from \"../api\";\n\nclass AdvancedStore {\n  // ====================================================\n  // State\n  // ====================================================\n  products = [];\n\n  query = \"\";\n  category = \"\";\n  sortAsc = true;\n\n  fetched = false;\n  fetching = false;\n\n  constructor() {\n    makeAutoObservable(this);\n\n    // Using reactions we can tie otherwise unrelated concerns and react to their changes\n    when(\n      () => !this.category && !this.query,\n      () => console.log(\"All filters cleared\")\n    );\n  }\n\n  // ====================================================\n  // Computed views\n  // ====================================================\n  // While MobX promotes OOP, we can still benefit from using FP where it's appropriate\n  get results() {\n    return this.products\n      .slice() // slice is neeeded because .sort() modifies array in place and we need a copy instead\n      .filter((product) => (this.category ? product.category === this.category : true))\n      .filter((product) => (this.query ? matches(this.query, product.title) : true))\n      .sort((a, b) => (this.sortAsc ? a.title.localeCompare(b.title) : b.title.localeCompare(a.title)));\n  }\n\n  get canClearFilters() {\n    return this.query || this.category || !this.sortAsc;\n  }\n\n  // ====================================================\n  // Actions\n  // ====================================================\n  onFetch = async () => {\n    this.fetching = true;\n\n    try {\n      const res = await fakeFetchProducts();\n      this.onFetchSuccess(res.data);\n    } catch (error) {\n      console.log(\"Failed to fetch\", error);\n    } finally {\n      this.fetching = false;\n    }\n  };\n\n  onFetchSuccess = (products) => {\n    this.products.replace(products);\n    this.fetched = true;\n  };\n\n  onChangeCategory = (category) => {\n    this.category = category;\n  };\n\n  onChangeQuery = (query) => {\n    this.query = query;\n  };\n\n  onChangeSort = (sortAsc) => {\n    this.sortAsc = sortAsc;\n  };\n\n  onClearFilters = () => {\n    this.category = \"\";\n    this.query = \"\";\n    this.sortAsc = true;\n  };\n}\n\nexport const store = new AdvancedStore();\n","import React from \"react\";\nimport { observer } from \"mobx-react-lite\";\n\nimport { store } from \"./Advanced.store\";\n\nconst CATEGORIES = [\"\", \"Phone\", \"Laptop\", \"Camera\"];\n\nconst Filters = observer(() => {\n  const {\n    fetched,\n    query,\n    category,\n    sortAsc,\n    canClearFilters,\n    onChangeCategory,\n    onChangeQuery,\n    onChangeSort,\n    onClearFilters,\n  } = store;\n\n  if (!fetched) {\n    return null;\n  }\n\n  return (\n    <>\n      <div>\n        Filter:\n        <select value={category || \"\"} onChange={(e) => onChangeCategory(e.target.value)}>\n          {CATEGORIES.map((category) => (\n            <option key={category} value={category}>\n              {category || \"All\"}\n            </option>\n          ))}\n        </select>\n      </div>\n\n      <div>\n        Search:\n        <input type=\"text\" value={query} onChange={(e) => onChangeQuery(e.target.value)} />\n      </div>\n\n      <div>\n        Sort ascending:\n        <input type=\"checkbox\" checked={sortAsc} onChange={(e) => onChangeSort(e.target.checked)} />\n      </div>\n\n      {canClearFilters && <button onClick={onClearFilters}>Clear filters</button>}\n    </>\n  );\n});\n\nexport const Advanced = observer(() => {\n  const { fetching, results, onFetch } = store;\n\n  return (\n    <>\n      <div>\n        <button onClick={onFetch}>{fetching ? \"Fetching\" : \"Fetch\"}</button>\n      </div>\n\n      <Filters />\n\n      <ul>\n        {results.map((product) => (\n          <li key={product.id}>{product.title}</li>\n        ))}\n      </ul>\n    </>\n  );\n});\n","import t from \"prop-types\";\nimport { makeAutoObservable } from \"mobx\";\n\nimport { matches } from \"../../api\";\n\nexport class CollectionModule {\n  // ====================================================\n  // State\n  // ====================================================\n  data = [];\n\n  filtersState = {};\n  filtersDefinition = {};\n\n  query = \"\";\n  sortAsc = true;\n\n  fetched = false;\n  fetching = false;\n\n  props = {};\n\n  constructor(props) {\n    makeAutoObservable(this);\n\n    this.props = props;\n\n    if (props.filters) {\n      Object.entries(props.filters).forEach(([key, options]) => this.onSetFilterDefinition(key, options));\n    }\n  }\n\n  // ====================================================\n  // Computed views\n  // ====================================================\n  get results() {\n    return (\n      this.data\n        // get a copy of the data for this view (.sort() modifies arrays in place)\n        .slice()\n\n        // sort alphabetically\n        .sort((a, b) => (this.sortAsc ? a.title.localeCompare(b.title) : b.title.localeCompare(a.title)))\n\n        // filter by query match\n        .filter((item) => (this.query ? matches(this.query, item.title) : true))\n\n        // filter by filters state\n        .filter((item) =>\n          Object.entries(this.filtersState).every(([key, filter]) =>\n            Object.entries(item).every(([prop, value]) => {\n              if (key === prop && filter) {\n                return filter === value;\n              }\n\n              return true;\n            })\n          )\n        )\n    );\n  }\n\n  get hasFilters() {\n    return Object.keys(this.filtersState).length && Object.values(this.filtersState).every((state) => state);\n  }\n\n  get canClearFilters() {\n    return Boolean(this.query || !this.sortAsc || this.hasFilters);\n  }\n\n  // ====================================================\n  // Actions\n  // ====================================================\n  onFetch = async () => {\n    this.fetching = true;\n\n    try {\n      const res = await this.props.fetch();\n      this._onFetchSuccess(res.data);\n    } catch (error) {\n      this._onFetchFailure(error);\n    }\n  };\n\n  _onFetchSuccess = (data) => {\n    this.data.replace(data);\n    this.fetched = true;\n    this.fetching = false;\n  };\n\n  _onFetchFailure = (error) => {\n    console.log(\"Failed to fetch\", error);\n    this.fetching = false;\n  };\n\n  onSetFilterState = (key, value) => {\n    this.filtersState[key] = value;\n  };\n\n  onSetFilterDefinition = (key, options) => {\n    this.filtersDefinition[key] = options;\n  };\n\n  onChangeQuery = (query) => {\n    this.query = query;\n  };\n\n  onChangeSort = (sortAsc) => {\n    this.sortAsc = sortAsc;\n  };\n\n  onClearFilters = () => {\n    this.filtersState = {};\n    this.sortAsc = true;\n    this.query = \"\";\n  };\n}\n\n// If you use TypeScript, you can just use the class itself as a type\nexport const CollectionPropType = t.shape({\n  data: t.arrayOf(t.object).isRequired,\n  query: t.string.isRequired,\n  sortAsc: t.bool.isRequired,\n  fetched: t.bool.isRequired,\n  fetching: t.bool.isRequired,\n  props: t.shape({\n    fetch: t.func.isRequired,\n    filters: t.objectOf(t.array),\n  }).isRequired,\n});\n","import React from \"react\";\nimport { observer } from \"mobx-react-lite\";\n\nimport { CollectionPropType } from \"./Collection.module\";\n\nconst Filters = observer(({ collection }) => {\n  const {\n    canClearFilters,\n    fetched,\n    filtersState,\n    filtersDefinition,\n    onChangeQuery,\n    onChangeSort,\n    onClearFilters,\n    onSetFilterState,\n    query,\n    sortAsc,\n  } = collection;\n\n  if (!fetched) {\n    return null;\n  }\n\n  return (\n    <>\n      {filtersDefinition && (\n        <div>\n          {Object.entries(filtersDefinition).map(([filter, options]) => (\n            <div key={filter}>\n              {filter}:\n              <select value={filtersState[filter] || \"\"} onChange={(e) => onSetFilterState(filter, e.target.value)}>\n                <option value=\"\">All</option>\n\n                {options.map((option) => (\n                  <option key={option.id} value={option.title}>\n                    {option.title}\n                  </option>\n                ))}\n              </select>\n            </div>\n          ))}\n        </div>\n      )}\n\n      <div>\n        Search:\n        <input type=\"text\" value={query} onChange={(e) => onChangeQuery(e.target.value)} />\n      </div>\n\n      <div>\n        Sort ascending:\n        <input type=\"checkbox\" checked={sortAsc} onChange={(e) => onChangeSort(e.target.checked)} />\n      </div>\n\n      {canClearFilters && <button onClick={onClearFilters}>Clear filters</button>}\n    </>\n  );\n});\n\nconst Collection = observer(({ collection }) => {\n  const { fetching, results, onFetch } = collection;\n\n  return (\n    <>\n      <div>\n        <button onClick={onFetch}>{fetching ? \"Fetching\" : \"Fetch\"}</button>\n      </div>\n\n      <Filters collection={collection} />\n\n      <ul>\n        {results.map((product) => (\n          <li key={product.id}>{product.title}</li>\n        ))}\n      </ul>\n    </>\n  );\n});\n\nCollection.propTypes = {\n  collection: CollectionPropType.isRequired,\n};\n\nexport { Collection };\n","/**\n * Example of using reusable modules.\n */\n\nimport { autorun } from \"mobx\";\nimport { createContext, useContext } from \"react\";\n\nimport { fakeFetchProducts, fakeFetchCategories } from \"../api\";\n\nimport { CollectionModule } from \"./Collection\";\n\nclass ComplexStore {\n  categories = new CollectionModule({\n    fetch: fakeFetchCategories,\n  });\n\n  products = new CollectionModule({\n    fetch: fakeFetchProducts,\n    filters: {\n      category: [],\n\n      condition: [\n        { id: \"new\", title: \"new\" },\n        { id: \"used\", title: \"used\" },\n      ],\n    },\n  });\n\n  constructor() {\n    // Populate products category filter from categories collection.\n    // This could be done from inside the collection too but this is pretty complex as it is already.\n    // The point is that we are free to do all kinds of things because OOP and MobX allows us to.\n    autorun(() => this.products.onSetFilterDefinition(\"category\", this.categories.data));\n  }\n}\n\nconst store = new ComplexStore();\n\nconst StoreContext = createContext(store);\n\n// Using this hook we can get the store instance anyhwere in the render tree.\n// We don't even need to use StoreContext.Provider, since useContext will fallback to default value, which is our store.\nexport const useStore = () => useContext(StoreContext);\n","import React from \"react\";\nimport { observer } from \"mobx-react-lite\";\n\nimport { useStore } from \"./Complex.store\";\nimport { Collection } from \"./Collection\";\n\nexport const Complex = observer(() => {\n  const store = useStore();\n\n  return (\n    <div style={{ display: \"flex\" }}>\n      <div style={{ marginRight: 48 }}>\n        Categories\n        <Collection collection={store.categories} />\n      </div>\n\n      <div>\n        Products\n        <Collection collection={store.products} />\n      </div>\n    </div>\n  );\n});\n","import { makeAutoObservable } from \"mobx\";\n\nclass SimpleStore {\n  count = 0;\n\n  constructor() {\n    makeAutoObservable(this);\n  }\n\n  get isNegative() {\n    return this.count < 0 ? \"Yes\" : \"No\";\n  }\n\n  onAdd = () => {\n    this.count += 1;\n  };\n\n  onSubtract = () => {\n    this.count -= 1;\n  };\n}\n\nexport const store = new SimpleStore();\n","import React, { useState } from \"react\";\n\nimport { Advanced } from \"./advanced\";\nimport { Complex } from \"./complex\";\nimport { Simple } from \"./simple\";\n\nconst pages = [Simple, Advanced, Complex];\n\nfunction App() {\n  const [page, setPage] = useState(0);\n\n  const PageComponent = pages[page];\n\n  return (\n    <>\n      <h2>Demos</h2>\n\n      <div style={{ marginBottom: 24 }}>\n        <button onClick={() => setPage(0)}>Simple</button>\n        <button onClick={() => setPage(1)}>Advanced</button>\n        <button onClick={() => setPage(2)}>Complex</button>\n      </div>\n\n      <PageComponent />\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport { observer } from \"mobx-react-lite\";\n\nimport { store } from \"./Simple.store\";\n\nexport const Simple = observer(() => {\n  const { count, isNegative, onAdd, onSubtract } = store;\n\n  return (\n    <>\n      <div>Count: {count}</div>\n\n      <div>Is negative: {isNegative}</div>\n\n      <button onClick={onAdd}>Add</button>\n      <button onClick={onSubtract}>Subtract</button>\n    </>\n  );\n});\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}